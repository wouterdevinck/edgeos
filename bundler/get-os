#!/bin/bash

set -e
set -o pipefail

# Validate number of arguments
if [ "$#" -ne 2 ]; then
  echo "Usage: $0 version pc|rpi4" >&2
  exit 1
fi

# Check if valid configuration
if ! [[ $2 = @(rpi4|pc) ]]; then
  echo "Unknown configuration $2" >&2
  echo "Usage: $0 version pc|rpi4" >&2
  exit 1
fi

# Determine version and configuration to get
EDGEOS_VERSION=$1
EDGEOS_CONFIGURATION=$2

# Download location and file name
OS_RELEASE_URL="https://github.com/wouterdevinck/edgeos/releases/download"
OS_TAG="wouterdevinck/edgeos-$EDGEOS_CONFIGURATION"
OS_TARBAL="edgeos-$EDGEOS_CONFIGURATION.tar.gz"

# Download EdgeOS release, containing boot partitions and rootfs image
echo "  Downloading EdgeOS version $EDGEOS_VERSION for configurtion $EDGEOS_CONFIGURATION"
OS_DOWNLOAD="$OS_RELEASE_URL/$EDGEOS_VERSION/$OS_TARBAL"
HTTP_CODE=$(curl $OS_DOWNLOAD -s -L -o $OS_TARBAL -w "%{http_code}")

# If download fails, attempt getting EdgeOS from Docker instead
# This is useful for testing with unreleased versions or local builds
if [[ ${HTTP_CODE} -eq 404 ]]; then
  echo "    Release not found, attempting to get EdgeOS $EDGEOS_VERSION from Docker instead"
  CID=$(docker create $OS_TAG:$EDGEOS_VERSION nop)
  docker cp $CID:$OS_TARBAL $OS_TARBAL
  docker rm $CID > /dev/null 2>&1
fi

# Unpack release tarbal
echo "  Unpacking EdgeOS tarbal"
tar -xf $OS_TARBAL > /dev/null
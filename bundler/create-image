#!/bin/bash

set -e
set -o pipefail

DOCKER_COMPOSE_FILE="docker-compose.yml"
MANIFEST_FILE="manifest.json"

IMAGE_NAME="disk.img"
VHDX_NAME="disk.vhdx"

RAW_IMAGE_OUTPUT_EXT="img"
IMAGE_OUTPUT_EXT="img.gz"
VHDX_OUTPUT_EXT="vhdx.gz"

WORKDIR="tmp"

# Read and validate arguments
if [ "$#" -ne 1 ]; then
  echo "Usage: $0 pc|rpi4" >&2
  exit 1
fi
if ! [[ $1 = @(rpi4|pc) ]]; then
  echo "Unknown configuration $2" >&2
  echo "Usage: $0 pc|rpi4" >&2
  exit 1
fi
EDGEOS_CONFIGURATION=$1 

# Create working directory
rm -rf $WORKDIR
mkdir -p $WORKDIR

# Copy manifest and compose files to workdir
cp $DOCKER_COMPOSE_FILE $WORKDIR
cp $MANIFEST_FILE $WORKDIR

# Go to workdir
pushd $WORKDIR > /dev/null

# Read/edit manifest file
source process-manifest $MANIFEST_FILE

# Name resulting file
OUTPUT_FILENAME="$APP_NAME-$EDGEOS_CONFIGURATION-$APP_VERSION"

# Info message
echo "Creating disk image $OUTPUT_FILENAME for $APP_NAME version $APP_VERSION"

# Get EdgeOS release, containing boot partitions and rootfs image
get-os $EDGEOS_VERSION $EDGEOS_CONFIGURATION

# Create partition with manifest and compose files
echo "  Creating manifest partition"
mksquashfs $MANIFEST_FILE $DOCKER_COMPOSE_FILE manifest.squashfs > /dev/null 2>&1

# Run genimage
echo "  Creating image"
BUILD_DIR=$(pwd) fakeroot genimage.sh -c /data/genimage-$EDGEOS_CONFIGURATION.cfg > /dev/null 2>&1

# Convert to vhdx in case of pc configuration
if [[ $EDGEOS_CONFIGURATION -eq "pc" ]]; then 
  echo "  Converting image to vhdx"
  qemu-img convert -f raw $IMAGE_NAME -O vhdx -o subformat=dynamic $VHDX_NAME
fi

# Compress image
echo "  Compressing image"
gzip -c $IMAGE_NAME > $OUTPUT_FILENAME.$IMAGE_OUTPUT_EXT 2> /dev/null
if [[ $EDGEOS_CONFIGURATION -eq "pc" ]]; then 
  echo "  Compressing vhdx"
  gzip -c $VHDX_NAME > $OUTPUT_FILENAME.$VHDX_OUTPUT_EXT 2> /dev/null
fi

# Copy output
mv $IMAGE_NAME $OUTPUT_FILENAME.$RAW_IMAGE_OUTPUT_EXT
popd > /dev/null
cp $WORKDIR/$OUTPUT_FILENAME.* .

# Clean up
rm -rf $WORKDIR
echo "  Done."